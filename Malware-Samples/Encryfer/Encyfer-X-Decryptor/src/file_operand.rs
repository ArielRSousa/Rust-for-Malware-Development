use std::fs::{self, File};
use std::io::{Read, Write};
use std::path::Path;
use crate::decrypt::{decrypt_aes, decrypt_chacha};

pub fn recursive_decrypt(dir: &Path, key: &[u8; 32], chacha_key: &[u8; 32], chacha_nonce: &[u8; 12]) {
    if dir.is_dir() {
        let entries = match fs::read_dir(dir) {
            Ok(entries) => entries,
            Err(_) => return, 
        };

        for entry in entries {
            let entry = match entry {
                Ok(entry) => entry,
                Err(_) => continue,  
            };
            let path = entry.path();
            if path.is_dir() {
                recursive_decrypt(&path, key, chacha_key, chacha_nonce);
            } else {
                decrypt_file(&path, key, chacha_key, chacha_nonce);
            }
        }
    }
}

fn decrypt_file(file_path: &Path, key: &[u8; 32], chacha_key: &[u8; 32], chacha_nonce: &[u8; 12]) {
    if file_path.extension().and_then(|ext| ext.to_str()) != Some("smukx") {
        return;
    }

    let mut file = match File::open(file_path) {
        Ok(file) => file,
        Err(_) => return,
    };

    let mut contents = Vec::new();
    if file.read_to_end(&mut contents).is_err() {
        return;
    }

    let decrypted_chacha = decrypt_chacha(&contents, chacha_key, chacha_nonce);
    let decrypted_aes = decrypt_aes(&decrypted_chacha, key);

    let mut original_file_path = file_path.to_path_buf();
    original_file_path.set_extension("");  // Remove .smukx extension

    let mut dec_file = match File::create(&original_file_path) {
        Ok(file) => file,
        Err(_) => return,
    };
    if dec_file.write_all(&decrypted_aes).is_err() {
        return;
    }

    fs::remove_file(file_path).unwrap_or_else(|_| ());
}

